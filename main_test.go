package main

import (
    "testing"
)

func TestReverseNumber(t *testing.T) {
    result := reverseNumber(843)
    if result != 348 {
        t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å 348, –ø–æ–ª—É—á–µ–Ω–æ %d", result)
    }
}

func TestIsRightTriangle(t *testing.T) {
    result := isRightTriangle(6, 8, 10)
    if result != "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π" {
        t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å '–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π', –ø–æ–ª—É—á–µ–Ω–æ '%s'", result)
    }
}

func TestTimeFromSeconds(t *testing.T) {
    hours, minutes := timeFromSeconds(13257)
    if hours != 3 || minutes != 40 {
        t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å 3 —á–∞—Å–∞ 40 –º–∏–Ω—É—Ç, –ø–æ–ª—É—á–µ–Ω–æ %d —á–∞—Å–æ–≤ %d –º–∏–Ω—É—Ç", hours, minutes)
    }
}	
func TestAddStarsBetweenLetters(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected string
	}{
		{
			name:     "–°—Ç—Ä–æ–∫–∞ —Å —Ä–∞–∑–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º –∏ —Å–∏–º–≤–æ–ª–∞–º–∏",
			input:    "Go-1.2.3",
			expected: "G*o*-*1*.*2*.*3",
		},
		{
			name:     "–ö–∏—Ä–∏–ª–ª–∏—Ü–∞ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã",
			input:    "–ü—Ä–∏–≤–µ—Ç!–ö–∞–∫ –¥–µ–ª–∞?",
			expected: "–ü*—Ä*–∏*–≤*–µ*—Ç*!*–ö*–∞*–∫* *–¥*–µ*–ª*–∞*?",
		},
		{
			name:     "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞",
			input:    "",
			expected: "",
		},
		{
			name:     "–û–¥–∏–Ω —Å–∏–º–≤–æ–ª",
			input:    "A",
			expected: "A",
		},
		{
			name:     "–≠–º–æ–¥–∑–∏",
			input:    "üòÄüëçüöÄ",
			expected: "üòÄ*üëç*üöÄ",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := addStarsBetweenLetters(tt.input)
			if result != tt.expected {
				t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å '%s', –ø–æ–ª—É—á–µ–Ω–æ '%s'", tt.expected, result)
			}
		})
	}
}

func TestSquareDigits(t *testing.T) {
	tests := []struct {
		name     string
		input    int
		expected int
	}{
		{
			name:     "–ß–∏—Å–ª–æ —Å –Ω—É–ª—è–º–∏",
			input:    1001,
			expected: 1001,
		},
		{
			name:     "–û–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ",
			input:    7,
			expected: 49,
		},
		{
			name:     "–ß–∏—Å–ª–æ —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è —Ü–∏—Ñ—Ä–∞–º–∏",
			input:    222,
			expected: 444,
		},
		{
			name:     "–ë–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ",
			input:    987654321,
			expected: 816449362516941,
		},
		{
			name:     "–ù–æ–ª—å",
			input:    0,
			expected: 0,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := squareDigits(tt.input)
			if result != tt.expected {
				t.Errorf("–î–ª—è %d –æ–∂–∏–¥–∞–ª–æ—Å—å %d, –ø–æ–ª—É—á–µ–Ω–æ %d", tt.input, tt.expected, result)
			}
		})
	}
}